/**
 * name: note-book
 * version: v1.0.9
 * description: 笔记本 📚  世界上只有10类人：一类是懂二进制的，一类是不懂的。
 * author: Alimales <only_tigerhu@163.com>
 * homepage: https://www.tigerzh.com
 */
import{_ as e,o,c as t,a as r}from"./app.a5d386c5.js";const a=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"note/thinking-in-ract.md"}'),c={name:"note/thinking-in-ract.md"},i=[r('<h5 id="react思考" tabindex="-1">React思考 <a class="header-anchor" href="#react思考" aria-hidden="true">#</a></h5><p>​ 整个react库的设计十分的精细，每一个功能模块经得起细细品味，通读官方文档的react哲学<a href="https://zh-hans.reactjs.org/docs/thinking-in-react.html" target="_blank" rel="noreferrer">官方文档</a>，油然而生amazing的惊叹。</p><p>​ react把整个页面组件化，再把组件的数据和页面的表现分离开来开发者不仅要学习简单的积木搭建，更多的是对积木设计切割的思考和研究。不得不提的是，由于数据（<code>state</code>）和页面分离开来，数据就变得灵活起来，数据的合理管理是一件复杂的事情，更多的是考验开发功底能力。</p><p>​ 那么如何对UI进行合理分割，数据管理怎么做合理？</p><p>​ 可以看到在react官方文档中一个搜索的功能分割成了五个模块</p><ol><li><strong><code>FilterableProductTable</code> (橙色):</strong> 是整个示例应用的整体</li><li><strong><code>SearchBar</code> (蓝色):</strong> 接受所有的<em>用户输入</em></li><li><strong><code>ProductTable</code> (绿色):</strong> 展示<em>数据内容</em>并根据<em>用户输入</em>筛选结果</li><li><strong><code>ProductCategoryRow</code> (天蓝色):</strong> 为每一个<em>产品类别</em>展示标题</li><li><strong><code>ProductRow</code> (红色):</strong> 每一行展示一个<em>产品</em></li></ol><p><img src="https://c18e-1257416358.cos.accelerate.myqcloud.com/uPic/image-20200215100353233.png" alt="image-20200215100353233"></p><p><strong>如何对UI进行合理的分割？</strong></p><ol><li>精细分割 <code>对每一个组件精心分割，从项目结构分割，根据业务抽离组件复用，模块复用，整合公共代码模块，公共模块。每个组件开发代码不超过500行</code></li><li>次精细分割 <code>对项目进行结构分割，公共组件整合，有严格和单独的约定和方式。</code></li><li>粗略分割 <code>按照第一印象进行大致分割，整合几个大模块，进行拼合</code></li><li>整体模块 <code>整体app为一个模块</code></li></ol><p><strong>合理性是一个相对的名次，针对不同情况下会有不同的结果。</strong></p><ol><li><p>在时间充足，资源准备完善的时候，项目大而全 这种情况下采用第一种方式是合理的</p></li><li><p>在时间不充足，资源准备完善的时候，项目中等 可以按照情况采用第二种或第三种情况进行选择</p></li><li><p>在开发针对个人或实验型的功能的时候可以使用第四种方式</p><p>使用第四种方式在此时是合理的</p></li></ol><p><strong>数据管理怎么做合理？</strong></p><p>由于数据是存在于组件中的，并且数据的流动是单向的，所以数据的管理和组件的分割有密不可分的关系，对于开发人员来说组件的分割可以写在每个小组件中，也可以在顶层的组件中进行管理，根据业务的管理是更加合理的，因为整个开发的流程和迭代和业务有密不可分的关系，所以数据管理根据业务功能来做更加的合理！</p>',13)];const l=e(c,[["render",function(e,r,a,c,l,n){return o(),t("div",null,i)}]]);export{a as __pageData,l as default};
