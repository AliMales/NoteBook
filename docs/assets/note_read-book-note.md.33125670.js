import{_ as s,o as a,c as n,a as l}from"./app.a5d386c5.js";const p=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":3,"title":"javascript高级程序设计笔记","slug":"javascript高级程序设计笔记","link":"#javascript高级程序设计笔记","children":[]}],"relativePath":"note/read-book-note.md"}'),o={name:"note/read-book-note.md"},e=[l('<h3 id="javascript高级程序设计笔记" tabindex="-1">javascript高级程序设计笔记 <a class="header-anchor" href="#javascript高级程序设计笔记" aria-hidden="true">#</a></h3><p>念完书依靠自己的回忆写出来才算是记住了。</p><h5 id="完整的页面" tabindex="-1">完整的页面 <a class="header-anchor" href="#完整的页面" aria-hidden="true">#</a></h5><ol><li>页面的组成：核心（ECMAscript） 、文档对象模型（DOM）是针对 XML 经过扩展用于 HTML 的程序编程 API、浏览器对象模型（BOM）控制浏览器显示的页面以外部分</li><li>常见的 Web 浏览器知识 ECMAScript 实现的<strong>宿主环境</strong>之一，其他环境包括 Node、Adobe Flash</li></ol><h5 id="在html中使用javascript" tabindex="-1">在HTML中使用javascript <a class="header-anchor" href="#在html中使用javascript" aria-hidden="true">#</a></h5><p>下面两个属性可以控制 script 加载，它们不能严格保证执行顺序：</p><ol><li>async：不阻塞页面，下载并且执行脚本</li><li>defer：脚本延迟到文档被完全解析和显示后再执行。</li></ol><p>script 脚本中不要嵌入出现<code>&quot;&quot;</code> 字符串，会被错误识别为结束标签。正确写法是：<code>&quot;&lt;\\/script&gt;&quot;</code>。</p><p>如果 script 标签中既有代码内容，并且也引入了外部脚本（src 属性）。浏览器只会执行外部脚本。</p><h5 id="可扩展超文本标记语言-xhtml" tabindex="-1">可扩展超文本标记语言 XHTML <a class="header-anchor" href="#可扩展超文本标记语言-xhtml" aria-hidden="true">#</a></h5><p>XHTML 编写比 HTML 更严格，例如 <code>&gt;</code> 等符号都需要转义。为了保证 js 正常运行，用 <code>CDATA</code> 来包裹。</p><p>下面代码在不兼容 xml 的浏览器可以平稳退化：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">text/javascript</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  //&lt;![CDATA[</span></span>\n<span class="line"><span style="color:#A6ACCD;">  function compare(a, b) </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">if</span><span style="color:#A6ACCD;"> (a </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> b) </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">      console.log(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">a is less than b</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">);</span></span>\n<span class="line"><span style="color:#F07178;">    }</span></span>\n<span class="line"><span style="color:#F07178;">  }</span></span>\n<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">//]]&gt;</span></span>\n<span class="line"><span style="color:#F07178;">&lt;/script&gt;</span></span>\n<span class="line"></span></code></pre></div><p>对于script关闭的过滤，下面写法更加友好。</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">body</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">noscript</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">请启用JavaScript</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">noscript</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">body</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre></div><p>针对 ES3 的不确定行为，ES5 增加了严格模式，它是“编译指示”，用来告知 Js 引擎切换到严格模式，需要在代码顶部添加：<code>&quot;use strict&quot;;</code></p><p>保留字是之后可能被用作关键字的标识符</p><p><code>var</code> 声明的变量存在声明提升</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">a</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">a</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">a</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#82AAFF;">test</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#89DDFF;">===============</span><span style="color:#A6ACCD;">解释为以下代码</span><span style="color:#89DDFF;">=============</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span></span>\n<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">a</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">undefined;</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">a</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">a</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">a</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#82AAFF;">test</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"></span></code></pre></div><p><code>null</code> 和 <code>undefined</code> 不相同，区别如下：</p><ul><li>null：空对象指针，<code>typeof null</code> 返回 <code>&quot;object&quot;</code>，常用于定义空变量</li><li>undefined：未定义，变量只声明时，默认赋值<code>undefined</code></li></ul><p><code>number</code>类型：</p><ul><li>8 进制：0 开头，例如 070</li><li>16 进制：0x 开头，例如 0x1f</li><li>科学计数法：1ex，例如 1e2 = 100</li></ul><p>所有 8 和 16 进制值在运算时，都会被转化为 10 进制。</p><p><code>Number.MIN_VALUE</code> 和 <code>Number.MAX_VALUE</code> 分别返回最小值和最大值。超出范围的会被转化为 <code>Infinity</code> 。</p><p>不合法的数，比如 1/0 ，会返回 <code>NaN</code>，需要用 <code>isNaN</code> 判断。对于对象，<code>isNaN</code> 先调用 <code>valueOf</code> ，再掉用 <code>toString</code> 。</p><p><code>parseInt</code> 应该在第二个参数指明进制</p><p>字符串变量的值是不可变的，当改变值时，会销毁之前的字符串，然后用包含新值的字符串填充变量。</p><p>调用数值的 <code>toString</code> 方法，给定参数代表进制。</p><p>特殊编码：</p><ul><li><code>\\xnn</code>：以 16 进制代码 nn 表示字符</li><li><code>\\unnnn</code>：以 16 进制代码 nnnn 表示 Unicode 字符</li></ul><p>Object 实例都有以下属性：</p><ul><li>constructor: 指向创建对象的函数</li><li>hasOwnProperty</li><li>obj1.isPrototypeOf(obj2): obj1 是不是在 obj2 的原型链上</li><li>propertyIsEnumerable(propName): propName 能否用 for-in 枚举</li></ul><p>对于 BOM、DOM 等宿主环境提供的对象，可能并不继承 Object</p><p><strong>位操作</strong></p><ul><li><code>~</code>: 按位非。<code>~110 =&gt; 001</code></li><li><code>&amp;</code>: 按位与。</li><li><code>|</code>: 按位或。</li><li><code>^</code>: 异或操作。位数相同返回 0，不同返回 1。</li><li><code>&lt;&lt;</code>: 左移</li><li><code>&gt;&gt;</code>: 默认情况，有符号右移，保留符号位（符合正常逻辑）</li><li><code>&gt;&gt;&gt;</code>: 无符号右移，在移动时候忽略符号位。</li></ul><p>正因为移动时候忽略符号位，因此例如 -64 = 111111..11100000，负数的补码会被当做正数的二进制码</p><p>布尔一般直接使用 <code>!!</code> 进行转化</p><p><code>arguments</code> 是类数组对象，严格模式下不能重写或者重新定义其中的值。</p><p><code>arguments.callee</code> 指向函数自身，用于编写递归函数。</p><p><strong>注意</strong>：js 的函数没有重载。ts 可以重载，但是也只是多类型声明，不符合传统意义的函数重载</p><h5 id="执行环境和作用域" tabindex="-1">执行环境和作用域 <a class="header-anchor" href="#执行环境和作用域" aria-hidden="true">#</a></h5><p>延长作用域链的情景</p><ol><li><code>try-catch</code>中的<code>catch</code>：作用域链前端新增错误对象</li><li><code>with</code>：作用域链前端新增指定对象</li><li>函数闭包</li></ol><h5 id="垃圾回收-gc" tabindex="-1">垃圾回收(GC) <a class="header-anchor" href="#垃圾回收-gc" aria-hidden="true">#</a></h5><h4 id="标记清除和引用计数" tabindex="-1">标记清除和引用计数 <a class="header-anchor" href="#标记清除和引用计数" aria-hidden="true">#</a></h4><p>浏览器的实现有两种：</p><ol><li><strong>标记清除</strong>：所有变量打标记；去掉环境中变量的标记，以及被环境中变量引用变量的标记；之后，清除还有标记的变量。</li><li><strong>引用计数</strong>：跟踪每个变量引用次数，被引用的变量就加 1；如果此变量又取了另一个变量，减 1。</li></ol><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> value </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 引用0</span></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> copy </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> value</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 引用+1</span></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  copy </span><span style="color:#676E95;font-style:italic;">// 引用 + 1</span></span>\n<span class="line"><span style="color:#89DDFF;">};</span></span>\n<span class="line"><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">copy </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 引用 -1</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">// 最后，引用次数为1</span></span>\n<span class="line"></span></code></pre></div><p>引用计数无法处理“循环引用”的情况，例如：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">problem</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">obja</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{},</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">objb</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{};</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">obja</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prop</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">objb</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// objb的引用次数和obja的引用次数都+1</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">objb</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prop</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">obja</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// objb的引用次数和obja的引用次数再+1</span></span>\n<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// obja 和 obj2 的引用次数均是2</span></span>\n<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 变量永远不会被清除，造成内存泄漏</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre></div><h5 id="性能优化" tabindex="-1">性能优化 <a class="header-anchor" href="#性能优化" aria-hidden="true">#</a></h5><p>在<strong>优化性能问题</strong>上，IE6 根据固定的内存分配量来触发 gc。但是如果脚本中声明了很多变量，并且都没有被释放，那么一直会达到触发标准，gc 会高频率触发，效率低下。</p><p>es7 做出了改进：临界值是动态计算的。如果一次垃圾回收的内存量低于 15%，那么临界值会翻倍；如果高于 85%，重置临界值。</p><h5 id="管理内存" tabindex="-1">管理内存 <a class="header-anchor" href="#管理内存" aria-hidden="true">#</a></h5><p>解除引用：不使用的变量，设置为<code>null</code>。</p><p>解除引用不意味变量内存回收，而是让其脱离执行环境，方便下次 gc 回收</p><h5 id="引用类型" tabindex="-1">引用类型 <a class="header-anchor" href="#引用类型" aria-hidden="true">#</a></h5><p>ECMAScript 是面向对象语言，但不是传统的面向对象。提供构造函数，专门对接传统对象编程</p><h5 id="object-类型" tabindex="-1">Object 类型 <a class="header-anchor" href="#object-类型" aria-hidden="true">#</a></h5><p><code>new Object()</code> 和 <code>{}</code> 声明等效</p><h5 id="array-类型" tabindex="-1">Array 类型 <a class="header-anchor" href="#array-类型" aria-hidden="true">#</a></h5><p>创建有<code>Array</code> <code>[]</code>。</p><p><code>length</code> 是可读写的，置 0 可以清空数组。</p><h5 id="栈和队列" tabindex="-1">栈和队列 <a class="header-anchor" href="#栈和队列" aria-hidden="true">#</a></h5><ul><li>栈：<code>push</code> &amp;&amp; <code>pop</code></li><li>队列：<code>push</code> &amp;&amp; `shift</li></ul><p>concat：参数会被自动展开</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> colors </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> colors2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> colors</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">concat</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> [</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;">])</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// [1, 2, 3, 4]</span></span>\n<span class="line"></span></code></pre></div><p>slice(star, end): 切片，返回新数组。</p><p>splice(start, count, ...items):</p><ul><li>删除：不需要第三个参数</li><li>插入：第二参数置 0</li><li>替换：第二个和第三个参数要用</li><li></li></ul><h5 id="date-类型" tabindex="-1">Date 类型 <a class="header-anchor" href="#date-类型" aria-hidden="true">#</a></h5><p>Date.now() 和 new Date().gewNow() 等价。</p><p>Date.parse(string): 返回 string 代表的日期的毫秒数。<code>年/月/日</code>，请不要使用<code>-</code>连接！</p><p>Date 实例可以直接比较大小，因为<code>valueOf</code>返回毫秒数</p><h5 id="regexp-类型" tabindex="-1">RegExp 类型 <a class="header-anchor" href="#regexp-类型" aria-hidden="true">#</a></h5><p>不推荐 <code>new RegExp(string)</code> 来声明正则，因为 string 是字符串，元字符需要双重转义。比如<code>\\n</code>，就是<code>\\\\n</code>。</p><p>每个实例拥有以下属性：</p><ul><li><p>global：g</p></li><li><p>ignoreCase: i</p></li><li><p>multiline: m</p></li><li><p><strong>lastIndex</strong>: 搜索下一匹配项的字符位置</p></li><li><p><strong>source</strong>: 正则的字符串表示</p></li></ul><h5 id="function-类型" tabindex="-1">Function 类型 <a class="header-anchor" href="#function-类型" aria-hidden="true">#</a></h5><p>代码求值时，js 引擎会将声明函数提升到源码顶部。</p><p><code>arguments</code>上重要属性：</p><ul><li>length：参数长度</li><li>callee: 函数自身引用</li></ul><p>函数上重要属性：</p><ul><li>caller: 调用此函数的函数引用。全局访问返回 null</li><li>length：函数希望接受的参数个数（不算默认参数）</li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">outer</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">inner</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">inner</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">a</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">b</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">arguments</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">callee</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">caller</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">outer</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#82AAFF;">outer</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// true</span></span>\n<span class="line"><span style="color:#A6ACCD;">inner</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 2 - 1 = 1</span></span>\n<span class="line"></span></code></pre></div><p>函数 prototype 属性无法枚举，不能用 for-in 枚举</p><ul><li>可以使用 <code>Object.getOwnPropertyNames</code> ，返回一个由指定对象的所有自身属性的属性名（包括不可枚举属性但不包括 Symbol 值作为名称的属性）组成的数组。</li><li>可以使用 <code>Reflect.ownKeys</code>，返回包括所有自身属性的属性名的数组</li></ul><h5 id="基本包装类型" tabindex="-1">基本包装类型 <a class="header-anchor" href="#基本包装类型" aria-hidden="true">#</a></h5><p>num.toFixed(位数)：自动舍入，返回字符串。</p><p>num.toExponential(位数)：转化为科学计数法，返回字符串。</p><p>String.fromCharCode(...charcodes): 将字符编码转化为字符串。</p><p>String.charCodeAt(index): 将 index 的字符转化为字符编码</p><h5 id="面向对象的程序设计" tabindex="-1">面向对象的程序设计 <a class="header-anchor" href="#面向对象的程序设计" aria-hidden="true">#</a></h5><p>ECMA-62 对象定义：无序属性集合，其属性可以包括基本值、对象和函数</p><p>ECMA 有 2 种属性：数据属性和访问器属性。它们可以通过 <code>Object.getOwnPropertyDescriptor</code> 来读取。</p><p><strong>1.数据属性</strong></p><p>通过 <code>Object.defineProperty(对象, 属性名, {属性: 值})</code> 来修改，可修改的属性是：configurable(是否可通过<code>delete</code>删除)、enumerable(能否 for-in 循环)、writable(能否修改)、value。</p><p>可以多次调用 api 修改上述属性，除了将 <code>configurable</code> 设置为 false。</p><p><strong>2.访问器属性</strong></p><p>访问器属性不包含数据值，也是通过 <code>Object.defineProperty(对象, 属性名, {属性: 值})</code> 来修改。</p><p>可修改的属性是：configurable、enumerable、get、set。其中，只指定 get 不指定 set，那么就是不可写；反过来，不能读。</p><h5 id="理解原型对象" tabindex="-1">理解原型对象 <a class="header-anchor" href="#理解原型对象" aria-hidden="true">#</a></h5><p>原型模式中，实例的 <code>__proto__</code> 指向构造函数的 <code>prototype</code>，因此，<code>构造函数.prototype.isPrototypeOf(实例)</code>返回 true。</p><p>因为原型链有下端“屏蔽”上端的机制，可以通过逐步 <code>delete</code> 来暴露上端属性。</p><h5 id="原型与-in-操作符" tabindex="-1">原型与 <code>in</code> 操作符 <a class="header-anchor" href="#原型与-in-操作符" aria-hidden="true">#</a></h5><p>如果对象可以访问给定属性，那么 <code>in</code> 返回 true</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Person</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>\n<span class="line"><span style="color:#FFCB6B;">Person</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">student</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> person </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Person</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">name</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;"> person)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// output</span></span>\n<span class="line"></span></code></pre></div><p>检测 <code>prototype</code> 是否位于 原型链上，而不位于实例上</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">hasPropertyInPrototype</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">object</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">prototype</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// hasOwnProperty 是否位于实例上</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">prototype</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">in</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">object</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">hasOwnProperty</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">prototype</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre></div><h5 id="函数表达式" tabindex="-1">函数表达式 <a class="header-anchor" href="#函数表达式" aria-hidden="true">#</a></h5><h5 id="闭包" tabindex="-1">闭包 <a class="header-anchor" href="#闭包" aria-hidden="true">#</a></h5><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">createFunction</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">result</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Array</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> (</span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">++</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">result</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">};</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">result</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre></div><p>调用 result 中的函数，返回值均是 10。这是因为 <code>var</code> 不是块级作用域，闭包声明造成了内函数可以访问 <code>createFunction</code> 的作用域，并且在结束函数后，变量<code>i</code>的生命被延长了下来。例如，当调用 <code>result[0]</code> 的时候，就会访问并且返回 <code>createFunction</code> 中的 变量<code>i</code>的值。</p><p>如果将 <code>var</code> 换成 <code>let</code>，则不存在这个问题。虽然变量<code>i</code>生命被延长，也属于 <code>createFunction</code>作用域，但是<code>let</code>本身是“<strong>块级作用域</strong>”。也就是说，闭包中返回的<code>i</code>是当前循环下的<code>i</code>，没有发生污染。</p><h5 id="模仿块级作用域" tabindex="-1">模仿块级作用域 <a class="header-anchor" href="#模仿块级作用域" aria-hidden="true">#</a></h5><p>下面写法内存占用低，标记清除的<code>gc</code>在函数运行完，检测到不被使用，会立即销毁作用域链</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// ...</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)()</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"></span></code></pre></div><h5 id="私有变量" tabindex="-1">私有变量 <a class="header-anchor" href="#私有变量" aria-hidden="true">#</a></h5><p>利用闭包，可以很巧妙地实现静态私有变量、私有函数方法等</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">name</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;&quot;</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 静态私有变量</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">    name</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">name</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">123</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">};</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)()</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"></span></code></pre></div><h5 id="window-对象" tabindex="-1">window 对象 <a class="header-anchor" href="#window-对象" aria-hidden="true">#</a></h5><p>双重角色：js 访问浏览器的 api + ECMAScript 规定的 global 对象</p><h5 id="全局作用域" tabindex="-1">全局作用域 <a class="header-anchor" href="#全局作用域" aria-hidden="true">#</a></h5><p>定义在全局的变量不能被 delete, 定义在 window 上的属性可以被 delete</p><h5 id="窗口关系及框架" tabindex="-1">窗口关系及框架 <a class="header-anchor" href="#窗口关系及框架" aria-hidden="true">#</a></h5><p>对于 window 的<code>frames</code>，为了保证兼容性，请使用：<code>top.frames</code>。因为<code>top</code>是绝对的。</p><p>除了<code>top</code>外，还有<code>parent</code>，在没有任何框架情况下，<code>top === window</code>。</p><p>最后，还有<code>self</code>。在 sw 中，常用 self 访问 window 上的 api。</p><h5 id="系统对话框" tabindex="-1">系统对话框 <a class="header-anchor" href="#系统对话框" aria-hidden="true">#</a></h5><p>它们是浏览器决定的，是同步和模态的。显示的时候，会终止代码执行</p><h5 id="location-对象" tabindex="-1">location 对象 <a class="header-anchor" href="#location-对象" aria-hidden="true">#</a></h5><p>location.href(最常用) 和 window.location 本质都是调用 location.assign()。</p><p>除此之外，修改 location 上的其他属性，也可以改变当前加载的页面，比如 <code>location.hash=&#39;#setion&#39;</code></p><p>以上方法，会在浏览器中生成新的历史记录。使用<code>location.replace()</code>方法，不会在浏览器中生成历史记录。</p><p>location.reload(true)：强制重新加载</p><h5 id="navigator-对象" tabindex="-1">navigator 对象 <a class="header-anchor" href="#navigator-对象" aria-hidden="true">#</a></h5><p><code>navigator.plugins</code> 存放插件信息</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 通用检测方法</span></span>\n<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">hasPlugin</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">name</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;&quot;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">name</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toLocaleLowerCase</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> (</span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">navigator</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">plugins</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">++</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">navigator</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">plugins</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toLocaleLowerCase</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">indexOf</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">name</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre></div><p>但由于 IE 浏览器的兼容，最好针对不同浏览器封装不同的插件检测方法</p><h5 id="注册处理程序" tabindex="-1">注册处理程序 <a class="header-anchor" href="#注册处理程序" aria-hidden="true">#</a></h5><p>google 支持 registerProtocolHandler 自定义协议。比如打开<code>https://www.baidu.com</code>的控制台，在其中输入：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 理论上是这样，但是效果不好</span></span>\n<span class="line"><span style="color:#A6ACCD;">navigator</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">registerProtocolHandler</span><span style="color:#A6ACCD;">(</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">web+baidu</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">https://www.baidu.com/s?wd=%s</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Baidu handler</span><span style="color:#89DDFF;">&quot;</span></span>\n<span class="line"><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"></span></code></pre></div><h5 id="history-对象" tabindex="-1">history 对象 <a class="header-anchor" href="#history-对象" aria-hidden="true">#</a></h5><p>history.go(): 任意跳转。数字代表前后跳转，字符串会自动找寻历史中最近的位置跳转。</p><p>history.length: 保存历史记录的数量</p>',146)];const t=s(o,[["render",function(s,l,p,o,t,c){return a(),n("div",null,e)}]]);export{p as __pageData,t as default};
