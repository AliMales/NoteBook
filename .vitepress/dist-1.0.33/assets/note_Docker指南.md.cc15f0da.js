import{_ as s,j as n,k as a,S as l}from"./chunks/framework.2ff57350.js";const o=JSON.parse('{"title":"Docker指南","description":"","frontmatter":{},"headers":[],"relativePath":"note/Docker指南.md","filePath":"note/Docker指南.md"}'),p={name:"note/Docker指南.md"},e=[l('<h1 id="docker指南" tabindex="-1">Docker指南 <a class="header-anchor" href="#docker指南" aria-label="Permalink to &quot;Docker指南&quot;">​</a></h1><ol><li><h3 id="安装-docker" tabindex="-1">安装 Docker： <a class="header-anchor" href="#安装-docker" aria-label="Permalink to &quot;安装 Docker：&quot;">​</a></h3><ul><li><h5 id="在-linux-上" tabindex="-1">在 Linux 上： <a class="header-anchor" href="#在-linux-上" aria-label="Permalink to &quot;在 Linux 上：&quot;">​</a></h5><ul><li><h5 id="执行以下命令以安装-docker" tabindex="-1">执行以下命令以安装 Docker： <a class="header-anchor" href="#执行以下命令以安装-docker" aria-label="Permalink to &quot;执行以下命令以安装 Docker：&quot;">​</a></h5><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">sudo apt-get update</span></span>\n<span class="line"><span style="color:#A6ACCD;">sudo apt-get install docker-ce docker-ce-cli containerd.io</span></span></code></pre></div></li><li><h5 id="验证-docker-是否已正确安装" tabindex="-1">验证 Docker 是否已正确安装： <a class="header-anchor" href="#验证-docker-是否已正确安装" aria-label="Permalink to &quot;验证 Docker 是否已正确安装：&quot;">​</a></h5><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">docker --version</span></span></code></pre></div></li></ul></li><li><h5 id="在-macos-上" tabindex="-1">在 macOS 上： <a class="header-anchor" href="#在-macos-上" aria-label="Permalink to &quot;在 macOS 上：&quot;">​</a></h5><ul><li><h5 id="下载-docker-desktop-for-mac-安装包-并双击运行安装程序。" tabindex="-1">下载 Docker Desktop for Mac 安装包，并双击运行安装程序。 <a class="header-anchor" href="#下载-docker-desktop-for-mac-安装包-并双击运行安装程序。" aria-label="Permalink to &quot;下载 Docker Desktop for Mac 安装包，并双击运行安装程序。&quot;">​</a></h5></li><li><h5 id="安装完成后-在-launchpad-中找到-docker-图标并启动。" tabindex="-1">安装完成后，在 Launchpad 中找到 Docker 图标并启动。 <a class="header-anchor" href="#安装完成后-在-launchpad-中找到-docker-图标并启动。" aria-label="Permalink to &quot;安装完成后，在 Launchpad 中找到 Docker 图标并启动。&quot;">​</a></h5></li></ul></li><li><h5 id="在-windows-上" tabindex="-1">在 Windows 上： <a class="header-anchor" href="#在-windows-上" aria-label="Permalink to &quot;在 Windows 上：&quot;">​</a></h5><ul><li><h5 id="下载-docker-desktop-for-windows-安装程序-并双击运行安装程序。" tabindex="-1">下载 Docker Desktop for Windows 安装程序，并双击运行安装程序。 <a class="header-anchor" href="#下载-docker-desktop-for-windows-安装程序-并双击运行安装程序。" aria-label="Permalink to &quot;下载 Docker Desktop for Windows 安装程序，并双击运行安装程序。&quot;">​</a></h5></li><li><h5 id="安装完成后-在开始菜单中找到-docker-图标并启动。" tabindex="-1">安装完成后，在开始菜单中找到 Docker 图标并启动。 <a class="header-anchor" href="#安装完成后-在开始菜单中找到-docker-图标并启动。" aria-label="Permalink to &quot;安装完成后，在开始菜单中找到 Docker 图标并启动。&quot;">​</a></h5></li></ul></li></ul></li><li><h3 id="验证-docker-安装" tabindex="-1">验证 Docker 安装： <a class="header-anchor" href="#验证-docker-安装" aria-label="Permalink to &quot;验证 Docker 安装：&quot;">​</a></h3><ul><li><h5 id="在终端或命令提示符中运行以下命令以验证-docker-是否正确安装并正在运行" tabindex="-1">在终端或命令提示符中运行以下命令以验证 Docker 是否正确安装并正在运行： <a class="header-anchor" href="#在终端或命令提示符中运行以下命令以验证-docker-是否正确安装并正在运行" aria-label="Permalink to &quot;在终端或命令提示符中运行以下命令以验证 Docker 是否正确安装并正在运行：&quot;">​</a></h5><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">docker run hello-world</span></span></code></pre></div></li></ul></li><li><h3 id="使用-docker-hub" tabindex="-1">使用 Docker Hub： <a class="header-anchor" href="#使用-docker-hub" aria-label="Permalink to &quot;使用 Docker Hub：&quot;">​</a></h3><ul><li><h5 id="docker-hub-是一个容器镜像的注册表-您可以在其中找到各种公共镜像。" tabindex="-1">Docker Hub 是一个容器镜像的注册表，您可以在其中找到各种公共镜像。 <a class="header-anchor" href="#docker-hub-是一个容器镜像的注册表-您可以在其中找到各种公共镜像。" aria-label="Permalink to &quot;Docker Hub 是一个容器镜像的注册表，您可以在其中找到各种公共镜像。&quot;">​</a></h5></li><li><h5 id="访问-docker-hub-网站-https-hub-docker-com" tabindex="-1">访问 Docker Hub 网站：<a href="https://hub.docker.com/" target="_blank" rel="noreferrer">https://hub.docker.com/</a> <a class="header-anchor" href="#访问-docker-hub-网站-https-hub-docker-com" aria-label="Permalink to &quot;访问 Docker Hub 网站：https://hub.docker.com/&quot;">​</a></h5></li><li><h5 id="搜索并选择您需要的镜像。例如-我们选择-nginx-镜像。" tabindex="-1">搜索并选择您需要的镜像。例如，我们选择 <code>nginx</code> 镜像。 <a class="header-anchor" href="#搜索并选择您需要的镜像。例如-我们选择-nginx-镜像。" aria-label="Permalink to &quot;搜索并选择您需要的镜像。例如，我们选择 `nginx` 镜像。&quot;">​</a></h5></li></ul></li><li><h3 id="下载和运行镜像" tabindex="-1">下载和运行镜像： <a class="header-anchor" href="#下载和运行镜像" aria-label="Permalink to &quot;下载和运行镜像：&quot;">​</a></h3><ul><li><h5 id="执行以下命令以从-docker-hub-下载并运行-nginx-镜像" tabindex="-1">执行以下命令以从 Docker Hub 下载并运行 <code>nginx</code> 镜像： <a class="header-anchor" href="#执行以下命令以从-docker-hub-下载并运行-nginx-镜像" aria-label="Permalink to &quot;执行以下命令以从 Docker Hub 下载并运行 `nginx` 镜像：&quot;">​</a></h5><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">docker run -d -p 8080:80 nginx</span></span></code></pre></div><ul><li><code>-d</code> 参数表示容器在后台运行。</li><li><code>-p</code> 参数指定端口映射，将容器的端口 80 映射到主机的端口 8080。</li></ul></li></ul></li><li><h3 id="验证镜像是否正在运行" tabindex="-1">验证镜像是否正在运行： <a class="header-anchor" href="#验证镜像是否正在运行" aria-label="Permalink to &quot;验证镜像是否正在运行：&quot;">​</a></h3><ul><li><h5 id="执行以下命令以查看正在运行的容器" tabindex="-1">执行以下命令以查看正在运行的容器： <a class="header-anchor" href="#执行以下命令以查看正在运行的容器" aria-label="Permalink to &quot;执行以下命令以查看正在运行的容器：&quot;">​</a></h5><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">docker ps</span></span></code></pre></div></li></ul></li><li><h3 id="访问应用程序" tabindex="-1">访问应用程序： <a class="header-anchor" href="#访问应用程序" aria-label="Permalink to &quot;访问应用程序：&quot;">​</a></h3><ul><li><h5 id="在浏览器中访问-http-localhost-8080-您应该能够看到-nginx-的默认欢迎页面。" tabindex="-1">在浏览器中访问 <code>http://localhost:8080</code>，您应该能够看到 Nginx 的默认欢迎页面。 <a class="header-anchor" href="#在浏览器中访问-http-localhost-8080-您应该能够看到-nginx-的默认欢迎页面。" aria-label="Permalink to &quot;在浏览器中访问 `http://localhost:8080`，您应该能够看到 Nginx 的默认欢迎页面。&quot;">​</a></h5></li></ul></li><li><h3 id="停止和删除容器" tabindex="-1">停止和删除容器： <a class="header-anchor" href="#停止和删除容器" aria-label="Permalink to &quot;停止和删除容器：&quot;">​</a></h3><ul><li><h5 id="执行以下命令以停止并删除容器" tabindex="-1">执行以下命令以停止并删除容器： <a class="header-anchor" href="#执行以下命令以停止并删除容器" aria-label="Permalink to &quot;执行以下命令以停止并删除容器：&quot;">​</a></h5><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">docker stop CONTAINER_ID</span></span>\n<span class="line"><span style="color:#A6ACCD;">docker rm CONTAINER_ID</span></span></code></pre></div><p>其中，<code>CONTAINER_ID</code> 是您在第 5 步中获得的容器 ID。</p></li></ul></li></ol><h3 id="docker常用命令" tabindex="-1">Docker常用命令 <a class="header-anchor" href="#docker常用命令" aria-label="Permalink to &quot;Docker常用命令&quot;">​</a></h3><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 以Ubuntu为例</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"># Step 1: 移除之前docker版本并更新更新 apt 包索引</span></span>\n<span class="line"><span style="color:#FFCB6B;">sudo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">apt-get</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">remove</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker-engine</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker.io</span></span>\n<span class="line"><span style="color:#FFCB6B;">sudo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">apt-get</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">update</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"># Step 2: 安装 apt 依赖包，用于通过HTTPS来获取仓库</span></span>\n<span class="line"><span style="color:#FFCB6B;">sudo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">apt-get</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">apt-transport-https</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ca-certificates</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">curl</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">software-properties-common</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"># Step 3: 添加 Docker 的官方 GPG 密钥</span></span>\n<span class="line"><span style="color:#FFCB6B;">curl</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-fsSL</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">https://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">sudo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">apt-key</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">add</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"># Step 4: 设置docker稳定版仓库，这里使用了阿里云仓库</span></span>\n<span class="line"><span style="color:#FFCB6B;">sudo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">add-apt-repository</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">deb [arch=amd64] https://mirrors.aliyun.com/docker-ce/linux/ubuntu </span><span style="color:#89DDFF;">$(</span><span style="color:#FFCB6B;">lsb_release</span><span style="color:#C3E88D;"> -cs</span><span style="color:#89DDFF;">)</span><span style="color:#C3E88D;"> stable</span><span style="color:#89DDFF;">&quot;</span></span>\n<span class="line"><span style="color:#FFCB6B;">sudo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">apt-get</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">update</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"># Step 5: 安装免费的docker Community版本docker-ce</span></span>\n<span class="line"><span style="color:#FFCB6B;">sudo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">apt-get</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-y</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker-ce</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"># sudo apt-get install -y docker-ce=&lt;VERSION&gt; #该命令可以选择docker-ce版本</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"># Step 6: 查看docker版本及运行状态</span></span>\n<span class="line"><span style="color:#FFCB6B;">sudo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-v</span></span>\n<span class="line"><span style="color:#FFCB6B;">sudo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">systemctl</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">status</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"># Step 7：本步非必需。使用阿里云设置Docker镜像加速，注意下面链接请使用阿里云给自己的URL</span></span>\n<span class="line"><span style="color:#FFCB6B;">sudo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">mkdir</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-p</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/etc/docker</span><span style="color:#A6ACCD;"> </span></span>\n<span class="line"><span style="color:#FFCB6B;">sudo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">tee</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/etc/docker/daemon.json</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;&lt;-</span><span style="color:#A6ACCD;">&#39;</span><span style="color:#89DDFF;">EOF</span><span style="color:#A6ACCD;">&#39; </span></span>\n<span class="line"><span style="color:#C3E88D;">{  &quot;registry-mirrors&quot;: [&quot;https://ua3456xxx.mirror.aliyuncs.com&quot;] } </span></span>\n<span class="line"><span style="color:#89DDFF;">EOF</span><span style="color:#A6ACCD;"> </span></span>\n<span class="line"><span style="color:#FFCB6B;">sudo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">systemctl</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">daemon-reload</span><span style="color:#A6ACCD;"> </span></span>\n<span class="line"><span style="color:#FFCB6B;">sudo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">systemctl</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">restart</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span></span></code></pre></div><p>接下来，我们来看下Docker的主要命令。</p><h2 id="docker镜像操作" tabindex="-1">Docker镜像操作 <a class="header-anchor" href="#docker镜像操作" aria-label="Permalink to &quot;Docker镜像操作&quot;">​</a></h2><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 搜索镜像：docker search + 镜像名字</span></span>\n<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">search</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">nginx</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"># 从registry拉取镜像：docker pull + 镜像名字:版本号</span></span>\n<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pull</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">nginx:latest</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"># 从registry仓库提交镜像：docker push + 仓库名:标签</span></span>\n<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">push</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">repro1:v1.0</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"># 查看本地镜像: docker images</span></span>\n<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">images</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"># 使用Dockerfile创建镜像: docker build + 目录，.代表当前目录，-t表示加标签</span></span>\n<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">build</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-t</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">mynginx:1.0</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">.</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"># 删除一个或多个镜像: docker rmi + 镜像1 + 镜像2</span></span>\n<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">rmi</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">mynginx:1.0</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">mynginx:2.0</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"># 删除未标记或未用过的镜像</span></span>\n<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">image</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">prune</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"># 删除未使用过的镜像</span></span>\n<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">image</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">prune</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-a</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"># 给镜像加标记： docker tag 镜像标签 新镜像标签名</span></span>\n<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">tag</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">mynginx:1.0</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">nginx1</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"># 把镜像保存为.tar文件: docker save 镜像 &gt; 文件</span></span>\n<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">save</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">mynginx:1.0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">mynginx_v1.tar</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"># 从.tar文件载入镜像: docker load -i .tar文件</span></span>\n<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">load</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-i</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">mynginx_v1.tar</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"># 根据容器创建镜像：docker commit 容器名 镜像名</span></span>\n<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">commit</span></span></code></pre></div><h2 id="docker容器操作" tabindex="-1">Docker容器操作 <a class="header-anchor" href="#docker容器操作" aria-label="Permalink to &quot;Docker容器操作&quot;">​</a></h2><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight has-diff"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 创建容器: docker create + 选项(-i, -t, -d, -p, -v, -e) + 镜像</span></span>\n<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">create</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--name</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">mynginx_1</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-it</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-p</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">8080</span><span style="color:#C3E88D;">:80</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">mynginx:1.0</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"># 各选项含义</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"># -i:以交互模式运行容器，通常与-t 同时使用；</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"># -d:后台运行容器，并返回容器ID；</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"># -p:端口隐射, 宿主机在前，容器在后</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"># -P:随机映射宿主机端口</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"># -t:为容器重新分配一个伪输入终端，通常与-i 同时使用；</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"># -v:目录挂载</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"># --entrypoint: 指定进入点</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"># --restart=always: 服务重启</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"># 启动容器：docker start + 容器名</span></span>\n<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">start</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">mynginx_1</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"># 创建 + 运行容器: docker run + 选项 + 镜像 + 命令</span></span>\n<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--name</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">mynginx_1</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-it</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-p</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">8080</span><span style="color:#C3E88D;">:80</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">mynginx:1.0</span></span>\n<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-it</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ubuntu</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/bin/bash</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"># 查看正在运行中的容器：docker ps</span></span>\n<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ps</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"># 查看所有容器，包括停止运行的容器: docker ps -a</span></span>\n<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ps</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-a</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"># 停止一个正在运行的容器: docker stop 容器</span></span>\n<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">stop</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">mynginx_1</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"># 重启容器：docker restart + 容器名</span></span>\n<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">restart</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">mynginx_1</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"># 容器重命名：docker rename 老名字 新名字</span></span>\n<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">rename</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">mynginx_1</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">mynginx_2</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"># 删除一个容器：docker rm 容器名</span></span>\n<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">rm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">mynginx_1</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"># 强制删除一个正在运行的容器：docker rm -f 容器名</span></span>\n<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">rm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-f</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">mynginx_1</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"># 删除已停止运行的所有容器: docker container prune</span></span>\n<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">container</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">prune</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"># 拷贝文件，从容器到宿主机：docker cp 容器名:容器内路径 宿主机文件路径</span></span>\n<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">cp</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">myweb_1:/index.html</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">index.html</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"># 拷贝文件，从宿主机到容器：docker cp 宿主机文件路径 容器名:容器内路径</span></span>\n<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">cp</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">index.html</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">myweb_1:/index.html</span><span style="color:#A6ACCD;"> </span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"># 进入运行的容器，执行命令: docker exec + 选项 + 容器名 + 命令 + 参数</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"># 推荐大家使用 docker exec命令，使用此命令即使exit容器终端，也不会导致容器的停止</span></span>\n<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">exec</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-it</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">mynginx_1</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/bin/bash</span></span>\n<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">exec</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-it</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">mynginx_1</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/bin/bash</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">start.sh</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"># 查看容器端口映射：docker port 容器名</span></span>\n<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">port</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">mynginx_1</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"># 查看容器内已修改文件：docker diff 容器名</span></span>\n<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">diff</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">mynginx_1</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"># 查看容器日志：docker logs + 容器名</span></span>\n<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">logs</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">web</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"># 查看容器内运行进程：docker top + 容器名</span></span>\n<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">top</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">web</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"># 查看容器的底层信息：docker inspect + 容器名</span></span>\n<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">inspect</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">web</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"># 利用inspect命令查看容器的IP地址</span></span>\n<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">inspect</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">web</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">grep</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">IPAddress</span><span style="color:#89DDFF;">&quot;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"># 查看运行容器的统计数据：docker stats</span></span>\n<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">stats</span></span></code></pre></div><h2 id="dockerfile详解" tabindex="-1">Dockerfile详解 <a class="header-anchor" href="#dockerfile详解" aria-label="Permalink to &quot;Dockerfile详解&quot;">​</a></h2><p>使用<code>$ docker build</code>命令构建镜像时需要用到Dockerfile，它通常会包含如下命令：</p><table><thead><tr><th>命令</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>FROM</td><td>指定基础镜像</td><td>FROM python:3.8.3-alpine</td></tr><tr><td>MAINTAINER</td><td>镜像创建者</td><td>MAINTAINER 大江狗</td></tr><tr><td>COPY</td><td>添加宿主机文件到容器，复制</td><td>COPY . /html/myapp</td></tr><tr><td>ADD</td><td>添加宿主机文件到容器，复制+解压</td><td>ADD myfile.tar /html/myapp</td></tr><tr><td>RUN</td><td>创建镜像时要执行的命令</td><td>RUN pip install -r requirements.txt</td></tr><tr><td>USER</td><td>切换执行后续命令的用户和用户组, 但这个用户必需首先已使用RUN的命令进行创建好了。</td><td>RUN groupadd -r redis &amp;&amp; useradd -r -g redis redis; USER redis(切换用户)</td></tr><tr><td>WORKDIR</td><td>指定工作目录</td><td>WORKDIR /html/myapp</td></tr><tr><td>CMD</td><td>容器启动时默认要运行的程序。如果执行 docker run 后面跟启动命令会被覆盖掉。</td><td>CMD [&quot;/bin/bash&quot;]</td></tr><tr><td>ENV</td><td>设置环境变量</td><td>ENV APP_HOME /html/myapp</td></tr><tr><td>ENTRYPOINT</td><td>同CMD，但其不会被覆盖，可以和docker run命令传递的参数进行拼接执行。</td><td>如果设置：ENTRYPOINT [&quot;nginx&quot;, &quot;-c&quot;] ， 运行<code>$ docker run mynginx_1 -c /etc/nginx/myweb.conf</code>将默认执行命令：<code>nginx -c /etc/nginx/myweb.conf</code>。</td></tr><tr><td>VOLUME</td><td>定义匿名数据卷。在启动容器时忘记挂载数据卷，会自动挂载到匿名卷。</td><td>VOLUME /tmp</td></tr><tr><td>EXPOSE</td><td>容器暴露端口，供link到当前容器或通过docker network的容器，不会和宿主机端口映射关系。</td><td>EXPOSE 8080</td></tr></tbody></table><h2 id="docker网络操作" tabindex="-1">Docker网络操作 <a class="header-anchor" href="#docker网络操作" aria-label="Permalink to &quot;Docker网络操作&quot;">​</a></h2><p>Docker network 是主要是用做容器之间的通信，即组建容器之间的局域网，然后加入这个网络的容器可以使用别名(network-alias, 比如web, db)或者IP地址进行通信，就如同局域网中主机之间的相互访问。</p><p><strong>备注</strong>：使用<code>-link</code> 也可以实现容器之间简单的网络，但是容器较多而且通信关系较为复杂时，使用network就更有条理。除此以外，官方也已经很早不建议使用<code>-link</code>方式进行容器互联，-link未来可能会被删除。</p><h3 id="网络驱动程序" tabindex="-1">网络驱动程序 <a class="header-anchor" href="#网络驱动程序" aria-label="Permalink to &quot;网络驱动程序&quot;">​</a></h3><p>Docker 的网络驱动程序默认情况下有四个：<code>bridge</code>、<code>host</code>、<code>overlay </code>和 <code>macvlan</code>，还有一个特殊的网络驱动 none 用于禁止容器访问网络。</p><ul><li><code>bridge</code>：默认的网络驱动程序。如果在创建的时候没有指定网络驱动，则默认使用 bridge，也就是桥接网络。跟虚拟机的网络地址转换差不多，通过一个内部的子网向容器提供 IP 和网络。</li><li><code>host</code>：容器会直接与宿主系统共享 IP 地址和网络，但是其它（例如存储，进程命名空间和用户命名空间）相对宿主机隔离的。</li><li><code>overlay</code>：覆盖网络模式可以将不同的Dockerd守护进程连接在一起，该网络模式支持集群容器之间相互通信，以及集群和某个单机版独立容器直接相互通信。该网络模式使用场景比较广泛，通常集群部署时会使用该模式。</li><li><code>macvlan</code>：这个网络驱动有点像虚拟机的桥接模式，它可以让你的容器直接连接到你的物理网络，比如连接到你的路由器，让物理网络来提供 IP 地址和网络。</li><li><code>none</code>: 禁用容器所有网络。通常与自定义网络驱动程序一起使用。</li></ul><h3 id="创建一个network" tabindex="-1">创建一个network <a class="header-anchor" href="#创建一个network" aria-label="Permalink to &quot;创建一个network&quot;">​</a></h3><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># mysite1-network是局域网的名字，可以自定义。默认bridge模式。</span></span>\n<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">network</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">create</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">mysite1-network</span><span style="color:#A6ACCD;"> </span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"># 利用--driver或-d指定使用bridge驱动，创建mysite2-network网络</span></span>\n<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">network</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">create</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">–-driver</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">bridge</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">mysite2-network</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"># 查看已创建的network列表</span></span>\n<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">network</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ls</span><span style="color:#A6ACCD;">  </span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"># 查看网络详情</span></span>\n<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">network</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">inspect</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">mysite1-network</span></span></code></pre></div><h3 id="将容器连接到network" tabindex="-1">将容器连接到network <a class="header-anchor" href="#将容器连接到network" aria-label="Permalink to &quot;将容器连接到network&quot;">​</a></h3><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 运行新的容器，并加入到mysite1-network网络中</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"># --network 表示这个容器要连接到的网络</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"># --network-alias 表示这个容器在此网络中的名称，也可以使用--ip来指定容器的ip</span></span>\n<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--name=docker-web</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-d</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--network=mysite1-network</span><span style="color:#A6ACCD;"> </span></span>\n<span class="line"><span style="color:#A6ACCD;">--network-alias</span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;">web</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">docker-web-image</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"># 将已经在运行的容器加入网络使用以下命令, 容器名为docker-web，别名为web</span></span>\n<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">network</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">connect</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--alias=web</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--network=mysite1-network</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker-web</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"># 连接网络时为docker-web容器指定ip地址</span></span>\n<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">network</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">connect</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--ip=192.10.36.122</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">multi-host-network</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker-web</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"># 断开docker-web容器与mysite1-network的连接</span></span>\n<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">network</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">disconnet</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">mysite1-network</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker-web</span></span></code></pre></div><h3 id="删除network" tabindex="-1">删除network <a class="header-anchor" href="#删除network" aria-label="Permalink to &quot;删除network&quot;">​</a></h3><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 删除mysite1-network网络</span></span>\n<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">network</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">rm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">mysite1-network</span></span></code></pre></div><h2 id="docker数据卷操作" tabindex="-1">Docker数据卷操作 <a class="header-anchor" href="#docker数据卷操作" aria-label="Permalink to &quot;Docker数据卷操作&quot;">​</a></h2><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 列出所有数据卷</span></span>\n<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">volume</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ls</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"># 使用过滤，列出所有未使用的数据卷</span></span>\n<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">volume</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ls</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--filter</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">dangling=</span><span style="color:#89DDFF;">true</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"># 删除一个数据卷</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"># 容器正在使用的数据卷不能删除，绑定挂载的无法删除。</span></span>\n<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">volume</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">rm</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">volume_nam</span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><h2 id="docker-compose" tabindex="-1">Docker-Compose <a class="header-anchor" href="#docker-compose" aria-label="Permalink to &quot;Docker-Compose&quot;">​</a></h2><p>安装docker-compose前必需先安装好docker。Docker-compose的下载和安装很简单，网上有很多教程，我就不再详述了。这里只记录下ubuntu系统下docker-compose的安装过程。</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># Step 1: 以ubuntu为例，下载docker-compose</span></span>\n<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">sudo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">curl</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-L</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">https://github.com/docker/compose/releases/download/1.17.0/docker-compose-</span><span style="color:#89DDFF;">`</span><span style="color:#FFCB6B;">uname</span><span style="color:#C3E88D;"> -s</span><span style="color:#89DDFF;">`</span><span style="color:#FFCB6B;">-</span><span style="color:#89DDFF;">`</span><span style="color:#FFCB6B;">uname</span><span style="color:#C3E88D;"> -m</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">-o</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/usr/local/bin/docker-compose</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"># Step 2: 给予docker-compose可执行权限</span></span>\n<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">sudo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">chmod</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">+x</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/usr/local/bin/docker-compose</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"># Step 3: 查看docker-compose版本</span></span>\n<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker-compose</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--version</span></span></code></pre></div><h2 id="docker-compose-yml配置文件" tabindex="-1">Docker-compose.yml配置文件 <a class="header-anchor" href="#docker-compose-yml配置文件" aria-label="Permalink to &quot;Docker-compose.yml配置文件&quot;">​</a></h2><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 第一部分: Building(构建镜像)</span></span>\n<span class="line"><span style="color:#FFCB6B;">web:</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;"># 使用当前目录下的Dockerfile</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">build:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">.</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">args:</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 增加额外参数</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">APP_HOME:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">app</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">volumes:</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 目录挂载</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">.:/code</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">depends_on:</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 依赖db和redis</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">db</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">redis</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;"># 使用定制化的Dockerfile，指定新目录相对路径和文件名</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">build:</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">context:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">./dir</span><span style="color:#A6ACCD;"> </span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">dockerfile:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Dockerfile.dev</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">container_name:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">app</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 自定义容器名</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;"># 基于现有镜像构建</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">image:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ubuntu</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">image:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ubuntu:14.04</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">image:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">remote-registry:4000/postgresql</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">image:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">bcbc65fd</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"># 第二部分: Ports(端口)</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">ports:</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 指定端口映射，HOST:Container</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">6379</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 指定容器的端口6379，宿主机会随机映射端口</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">8080:80</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;"># 宿主机端口8080，对应容器80</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;"># 暴露端口给-link或处于同一网络的容器，不暴露给宿主机。</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">expose:</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">3000</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">]</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"># 第三部分: Environment Variables(环境变量)</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">environment:</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">MODE:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">development</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">SHOW:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">true</span><span style="color:#89DDFF;">&#39;</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;"># 等同于</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">environment:</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">MODE=development</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">SHOW:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">true</span><span style="color:#89DDFF;">&#39;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;"># 使用环境变量.env文件</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">env_file:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">.env</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">env_file:</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">./common.env</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">./apps/web.env</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"># 第四部分：commands (命令)</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;"># 容器启动后默认执行命令</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">command</span><span style="color:#A6ACCD;">: </span><span style="color:#C3E88D;">bundle</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">exec</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">thin</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-p</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3000</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">command</span><span style="color:#A6ACCD;">: [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/bin/bash/</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">, </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">start.sh</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">]</span></span>\n<span class="line"><span style="color:#A6ACCD;"> </span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;"># 容器启动后程序入口</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">entrypoint:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/code/entrypoint.sh</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"># 第五部分：Networks(网络)</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">networks:</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 使用bridge驱动创建名为frontend的网络</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">frontend:</span></span>\n<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#FFCB6B;">driver:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">bridge</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">networks:</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 使用创建的网络进行通信</span></span>\n<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#FFCB6B;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">frontend</span></span>\n<span class="line"><span style="color:#A6ACCD;">      </span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;"># 加入已经存在的外部网络</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">networks:</span><span style="color:#A6ACCD;"> </span></span>\n<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#FFCB6B;">default:</span></span>\n<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">external:</span></span>\n<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#FFCB6B;">name:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">my-pre-existing-network</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"># 第六部分：Volumes(数据卷)</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">volumes:</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 创建名为postgres_data的数据卷</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">postgres_data:</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">db:</span></span>\n<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#FFCB6B;">image:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">postgres:latest</span></span>\n<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#FFCB6B;">volumes:</span></span>\n<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">postgres_data:/var/lib/postgresql/data</span></span>\n<span class="line"><span style="color:#A6ACCD;">      </span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"># 第七部分：External Links(外部链接)</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"># 目的是让Compose能够连接那些不在docker-compose.yml中定义的单独运行容器</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">services:</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">web:</span></span>\n<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#FFCB6B;">external_links:</span></span>\n<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">redis_1</span></span>\n<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">project_db_1:mysql</span></span></code></pre></div><h2 id="docker-compose指南" tabindex="-1">Docker-compose指南 <a class="header-anchor" href="#docker-compose指南" aria-label="Permalink to &quot;Docker-compose指南&quot;">​</a></h2><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 默认使用docker-compose.yml构建镜像</span></span>\n<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker-compose</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">build</span></span>\n<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker-compose</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">build</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--no-cache</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 不带缓存的构建</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"># 指定不同yml文件模板用于构建镜像</span></span>\n<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker-compose</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">build</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-f</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker-compose1.yml</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"># 列出Compose文件构建的镜像</span></span>\n<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker-compose</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">images</span><span style="color:#A6ACCD;">                          </span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"># 启动所有编排容器服务</span></span>\n<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker-compose</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">up</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-d</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"># 查看正在运行中的容器</span></span>\n<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker-compose</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ps</span><span style="color:#A6ACCD;"> </span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"># 查看所有编排容器，包括已停止的容器</span></span>\n<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker-compose</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ps</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-a</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"># 进入指定容器执行命令</span></span>\n<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker-compose</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">exec</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">nginx</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">bash</span><span style="color:#A6ACCD;"> </span></span>\n<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker-compose</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">exec</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">web</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">python</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">manage.py</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">migrate</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--noinput</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"># 查看web容器的实时日志</span></span>\n<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker-compose</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">logs</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-f</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">web</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"># 停止所有up命令启动的容器</span></span>\n<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker-compose</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">down</span><span style="color:#A6ACCD;"> </span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"># 停止所有up命令启动的容器,并移除数据卷</span></span>\n<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker-compose</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">down</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-v</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"># 重新启动停止服务的容器</span></span>\n<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker-compose</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">restart</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">web</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"># 暂停web容器</span></span>\n<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker-compose</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pause</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">web</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"># 恢复web容器</span></span>\n<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker-compose</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">unpause</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">web</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"># 删除web容器，删除前必需停止stop web容器服务</span></span>\n<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker-compose</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">rm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">web</span><span style="color:#A6ACCD;">  </span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"># 查看各个服务容器内运行的进程 </span></span>\n<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker-compose</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">top</span></span></code></pre></div>',33)];const t=s(p,[["render",function(s,l,o,p,t,c){return n(),a("div",null,e)}]]);export{o as __pageData,t as default};
